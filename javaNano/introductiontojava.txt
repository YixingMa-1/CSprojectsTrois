
08. When to Use Java
When to Use Java Heading

When to Use Java
When building an application, there are a ton of programming languages to choose from. Let's talk about some of the cases for which Java is especially well suited.

ND079 C1 L0 A08 When To Use Java

Play


00:08
00:00
Mute

Disable captions
Settings
Enter fullscreen
1.50
performance, multithreading, memory management, and portability.Play
When to Use Java Summary

In short, Java is especially well-suited for:

Business applications (client and server)
Web applications
Mobile applications on Android devices
But remember, Java really is used for a huge variety of applications. It is a good choice when you need:

Scalability
Performance
Multi-threading
Memory management
Portability
Note: We misspoke in the video when we said that all Android applications are developed in Java. Although Java was the original language used for Android and is still one of the main languages in use by many Android developers, Kotlin is another popular language for developing Android applications that is in widespread use today.

This lesson covers all the major building blocks we need to create a simple Java app:

Keywords. If we want to build an application in Java, we first must understand the basic vocabulary of the language. Java's keywords will provide us with that core, predefined words of the Java language.
Variables. Variables will provide us with a way to store data for our application. We'll learn how to use variables in Java and then we'll consider some key ways in which Java variables differ from those of other languages (such as Python).
Loops. Loops allow us to iterate over data structures, executing the same code repeatedly until a condition is met, making it possible to process large data structures with only a few lines of code.
Methods. The central idea behind methods is that we want to write a block of code once that we can then re-use many times.
Access Modifiers. We will learn how to use access modifiers to restrict access to variables and methods, so that users of our applications cannot access all of the data directly and in an unsafe manner.
Javadoc. How do we know how to communicate with an existing Java application? Or, once we create our own application, how do we share it with others? JavaDoc produces a searchable HTML document that defines the classes and interfaces of an application, making it easy for you or any developer to understand how to use the code.
Arrays. Arrays will provide us with a way to easily and efficiently store and retrieve collections of data, such as a list of phone numbers.
Throughout this lesson, you'll get hands-on practice with all of these building blocks, so that by the end of the lesson, you'll have the fundamental skills you need to build any number of basic Java applications yourself!


Notice that, in Java, we must specify the data type (e.g., int). This is becouse Java is a statically typed language. Here are the key points to remember about static typing:

The data type is bound to the variable when the variable is first declared.
The data type is checked when the code is compiled.
The data type for a variable cannot later be changed.
In contrast, some languages are dynamically typed. In dynamic typing:

The data type is bound to the value itself, but not to the variable.
The type is checked during runtime.
The data type of a variable can be changed after it is declared; since the type is associated with the value, assigning a new value may mean changing the data type.
Python is a popular example of a dynamically typed language. For example, in Python, you can declare a variable without explicitly stating the type:

Primitive Values vs Reference Values
In Java, there are two general kinds of values we can assign to a variable:

A primitive value is simply a value, by itself, with no additional data.
A reference value is a value that refers to an object stored in another location in memory.
Objects bundle the primitive value up with additional useful information and behavior. We'll get into how to create and use objects more later on.

In Java, there are eight primitive types, as you can see here:

Data Type	Size
byte	1 byte
short	2 bytes
int	4 bytes
long	8 bytes
float	4 bytes
double	8 bytes
boolean	1 byte
char	2 bytes


Type casting is changing one type into another type. There are two kinds of type casting: Automatic and manual.

Automatic Type Casting
Automatic type casting converts a smaller type into a larger type. For example:

int intNumber = 3;
double doubleNumber = intNumber;
System.out.println(doubleNumber);
When we print doubleNumber, the value will be 3.0. Notice that there is no precision lost going from a smaller type into a larger type. We started with 3 and ended up with 3.0.

Manual Type Casting
Manual type casting is necessary when we want to do either of these things:

Convert a larger type into a smaller type
Convert one object type into another
For example, here we are converting from a larger type (double) to a smaller type (int):

double doubleNumber = 3.5;
int intNumber = (int)doubleNumber;
System.out.println(intNumber);
The resulting value will be 3, not 3.5. When we go from a larger type into a smaller type, precision is lost. Java cuts off additional data that will not fit in the casted type. So when we go from a double to an int, any values that are not integers will be removed. This is called truncation.


Truncation is a loss of precision when going from one to type to another. Basically, we are cutting off or "truncating" the additional data.

Note that this is not the same thing as rounding. For example, if we round 3.9, we get 4.0. But if we truncate 3.9, we get simply 3! Truncation simply removes the additional data that will not fit, which is why it results in a loss of precision.

Name. The name of the method, which we use when calling or invoking the method.
Parameters. The variables that we pass the values to when we call the method.
Method body. The chunk of code, contained within curly braces, { }, that gets run when the method is invoked.
Return type. The data type of the value that the method returns.

Methods vs Functions
You'll often see the words function and method used interchangeably. Although the terms are sometimes used loosely, here's the distinction:

A function is any block of reusable/callable code.
A method is a block of reusable/callable code that is attached to a class or object.
So a method is a type of function, but it's one that is associated with a class or object, whereas other functions can be executed from anywhere.

In other words, we call any block of reusable code a function, whereas only some functions are also methods. All methods are functions but not all functions are methods.

When we are writing our code, we sometimes need to restrict access to certain data in the application in order to ensure it doesn't get modified in an unintended or harmful way.

For example, suppose we define a variable in one part of our application called employeePay. If we allow open access to this variable from any part of the application, it may be possible for someone to accidentally (or maliciously) access the data in this variable to find out how much someone else is paidâ€”or even modify that amount!

Fortunately, we can control which parts of our code can access the data in other parts. We do this using Java's access modifiers.

Access modifiers determine how other classes are allowed to access your variables and methods.

Classes, Subclasses, and Packages
In order to explain access modifiers, we'll be talking about classes, subclasses, and the related idea of packages. We haven't defined or explained any of these terms yet, but we will go over them thoroughly in the next few lessons. However, we need to get at least some idea about what access modifiers are now, because (as you'll see in a moment) we have already started using them!

For the moment, it is enough to think about classes and packages as ways of organizing your code. For example, in the Getting Started exercise we did earlier in this lesson, you may have noticed that all of your code was wrapped up inside a class:

public class GettingStarted {
    // Anything between the curly braces is inside the class!
}

// Anything outside the curly braces is outside the class!
In this case, the keyword public is an example of an access modifier. Access modifiers control things like whether the data inside of a class can be accessed only by other code inside of the class or also by code elsewhere in the application.

Not everything on this page may make perfect sense to you until you have gotten practice creating your own classes (and subclasses!). For now, just try to get the general idea. You may wish to revisit this page later on after you've completed the next two lessons.

Types of Access Modifiers
There are four types of access modifiers in Java:

Public means the class can be accessed from everywhere. If you have a method on a class that you want to expose to all other classes, then use this access modifier.
Private means only the defining class can access the data. This provides security, by not allowing other classes to change the data directly. Instead, they must make changes to the data via the provided methods only.
Protected means that access is restricted to the defining class, package, or subclass. This will be useful when we get into subclasses and inheritance in a later lesson, as it will allow our subclasses to use variables and methods from the parent class.
Default means access is restricted to the defining class or the package. This can be used when we have classes inside the same package that we may want to expose data and methods too.


Access Modifiers on Methods
We can also apply access modifiers to methods. Here are some examples, just so you can see what they look like:

private void methodName()
void methodName()  // The default is no access modifier
protected void methodName()
public void methodName()
Access Modifiers on Variables
And we can apply access modifiers to variables as well! We will get into this in detail in the lessons on object-oriented programming. Here are some examplesâ€”again, just so you can get the idea:

private int number;
int number3;  // Default is no access modifier
protected int number2;
public int number1;

Creating an Array
Here's an example of some code that creates an array of size four, containing four integer values:

int [] numbers  = {1, 2, 3, 4};
Notice that creating an array involves three steps:

Declare the type of the array, using brackets (as in int []).
Name the array (in this example, the name is numbers).
Add values to the array.
In this example, we are using an array literal to add the values, which simply means we are placing the values in a comma-separated list inside some curly braces, {1, 2, 3, 4}.

Accessing Array Elements
We can access the elements in an array based on their numerical index. Let's revisit the above example:

int [] numbers  = {1, 2, 3, 4};
To access one of the numbers, we would type the name of the array, followed by brackets containing the index number of the item we wantâ€”as in numbers[1].

Note that arrays start with an index of 0, not 1 (this is called zero-based indexing and is common in programming). So if we wanted to print the first item in the array, we would type:

System.out.printLn(numbers[0]);


Another Way to Create an Array
Here's another way we can create an array and add values to it:

int [] numbers = new int[4];
numbers[0] = 1;
numbers[1] = 2;
numbers[2] = 3;
numbers[3] = 4;
This approach uses the new keyword to create a new array object of size 4, and then we assign values to the four spaces created in the array. This style will feel more normal to you after we have worked with classes and objects later in the course.


In Java there are three different types of loops:

while loops
for loops
do while loops


while(condition){
    Execution block
}
Here's a concrete example:

int i = 0;
while(i < 5){
  System.out.println(i);
  i++;
}
Notice that we first set a counter variable, i, to keep track of how many times the loop has run. Each time it runs, we increment this variable by 1 (that's what i++ is doing). While i is less than 5, we continue to iterate, printing out the value of i every time.

for(initialization; condition; increment or decrement){
    Execution block
}
And here's a concrete example:

for(int i = 0; i < 5; i++){
    System.out.println(i);
}

Finally, here is the syntax for the do while loop:

do {
 Execution block
} while(condition);
And here's a concrete example:

int i = 0;
do {
  System.out.println(i);
  i++;
} while(i < 5);
The do while loop is very similar to the while loop. The key distinction is that the do while loop runs the loop once first before it checks the condition. This means that even if the condition is false right from the start, the code inside the loop will still get run once.