With Maps: Constant Lookup Time
Maps provide a solution. Maps are data structures that use key-value pairs. That is, every value in the map is paired with a key. When we want to retrieve a value, we simply provide the corresponding key.

Importantly, this retrieval is performed in constant time, meaning that the amount of time required to retrieve an item from the map takes a certain, fixed (constant) amount of time, and this time doesn't change based on how many items we add.

Map is an Interface
The Java Map is an Interface that provides three different distinct views of the data:

A list of the keys
A list of the values
A set of key-value mappings
We'll see how to use these in the upcoming exercise.

Creating a Map Object
In the Collections framework, the Map is an interface and cannot be directly used to insatiate a class. In the example below, we are creating a Map of people. Notice that we are using the concrete class HashMap to instantiate our Map object.

Map<String, Person> mapOfPeople = new HashMap<String, Person>();
Adding to a Map
Next we will look at adding objects to our Map. Remember that a Map takes a key-value pair. So when we add an object we will be adding the key and the value. In the example below we are using the email as the key and the value will be our Person object. To add to the Map we use the put method.

Person mike = new Person("Mike", "mike@email.com");
Person shaun = new Person("Shaun", "shaun@email.com");
Person sally = new Person("Sally", "sally@email.com");
Person cesar = new Person("Cesar", "cesar@email.com");

mapOfPeople.put(mike.getEmail(), mike);
mapOfPeople.put(shaun.getEmail(), shaun);
mapOfPeople.put(sally.getEmail(), sally);
mapOfPeople.put(cesar.getEmail(), cesar);
Retrieving an object from a Map
In this example, we will be looking at the syntax to retrieve a Person object from the Map using an email as the key.

mapOfPeople.get("mike@email.com");
Iterating over a Map
In our final example, let's see how we can iterate over our Map using a for-each loop. Remember that each Map has three distinct views for seeing the data. We can get the keys, the values, or key-value mapping. In the example below we are displaying all of the keys for our Map.

for (String email : mapOfPeople.keySet()) {
    System.out.println(email);
}

What is a Set?
Sometimes, as with the example of a list of phone numbers, it's important for the values in a collection to be unique. Fortunately, we have Sets. A Set is a collection type that has no duplicate values.

Note that Set extends the Collection interface and therefore provides the same methods as other Collection data structures do.

Concrete Implementations
There are three concrete implementations for the Set interface:

HashSet
TreeSet
LinkedHashSet
Each of these implementations vary, but all of them enforce the no-duplicate-values requirement of the Set interface.

Note: Above, we referred to these as "concrete implementations". Remember, "concrete" means that they are not interfaces or abstract classes, and they contain all of the code necessary per the interface.

Set Syntax
For your reference, here are the syntax examples we just looked at for creating and using sets.

Creating a Set Object
In the Collections framework, the Set is an interface and cannot be directly used to instantiate a class. In the example below we are creating a Set of strings. Notice, we are using the concrete class HashSet to instantiate our Set object.

Set<String> mySet = new HashSet<String>();
Adding to a Set
Next we will look at adding objects to our Set. Remember that a Set has an additional restriction that no duplicate values are allowed. In this example we are adding Strings to our Set using the add method:

mySet.add("Hello");
mySet.add("Hello");
mySet.add("Hellos");
Even though we used add three times, this will actually only add two items, since one of the items is a duplicate.

Retrieving an Object From a Set
In this example we will be looking at the syntax to retrieve a String object from our Set. Unfortunately, the only way retrieve an object from a Set is to iterate over the Set looking for the object. Below we are iterating over the Set to look for the "Hello" String. This example is simple but provides the necessary techniques for finding an object in a Set.

String foundObject;

for (String text : mySet) {
   if(text.equals("Hello"){
      foundObject  = text;
   }
}
