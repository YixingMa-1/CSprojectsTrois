Object-Oriented Programming (OOP)
One of the key characteristics of Java is is that it applies an object-oriented approach. This may be different from other languages you may be familiar with.

Benefits of an object-oriented programming approach include:

Better software reusability
Better maintainability
Reduced cost of developing software
What is an Object?
So what is an object? Essentially, it is a data structure that we create that bundles together and encapsulates two key things:

The state of the object (represented by variables)
The behavior of the object (modeled with methods)
This allows us to interact with the components of our application in more intuitive ways, and it also helps protect the methods and variables from being changed in undesirable ways from elsewhere in our code.

Example: Classroom Object
Object-oriented programming can be confusing at first, but once you see enough examples and work with enough objects yourself, it becomes much more intuitive. Let's have a look at another example, and start to get an idea of what an object looks like in code.

A class is like a blueprint for a kind of object. The class defines the state and behavior that an object of that class will have.

A single class can instantiate (or create) multiple objects of the same type. So, objects can also be referred to as instances of the class. Each instance of a class is unique, though they all follow the same blueprint defined in the class.

When we instantiate (or create) objects from that class, they will all have the states and behaviors defined in the class. Each object is considered an instance of the class. Like the dogs in the example, each object can have its own unique state, but all objects will share the same set of behaviors.

Parts of a Class Definition
Classes are composed of the following different parts:

The class name, which is always formatted in UpperCamelCase.
The class variables, which can be either primitives or object references. Note that you'll want to mark these private to protect your instance variables so other classes do not have direct access to them.
The constructor which is a special method used to initialize the object when it is created.
The methods used to define the behavior that objects of the class will share.
Accessor methods provide access to instance variables. The names of accessor methods typically start with "get".
Mutator methods allow other objects to change the values. The names of mutator methods start with "set".


Instance Variables vs Class Variables
Note the difference between instance variables and class variables.

Instance Variables are state variables that can have unique values for each object.
Class Variables are state variables that belong to the class itself, and are the same for every object. The static keyword identifies this variable as belonging to the class (not to individual objects).

public class Student {

    private final String id;
    private final String firstName;
    private final String lastName;
  
    public Student(String id, String firstName,String lastName){
      this.id = id;
      this.firstName = firstName;
      this.lastName = lastName;
    }
  
    public String getId(){
      return id;
    }
  
    public String getFirstName(){
      return fistName;
    }
  
    public String getLastName(){
      return lastName;
    }
  }
  