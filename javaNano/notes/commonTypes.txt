In this lesson, we will be learning about some common class types provided by the Java API. These types provide some incredibly helpful functionality that we'll need if we are to start building professional apps. The specific types we will be covering are:

Exceptions, which help us handle errors.
Enums, which help us set variables from a list of predefined values.
Dates and Calendar, which help us store and retrieve dates.
Regular Expressions (RegEx) which help us look for string patterns.
Advanced String features, which will help us manipulate and process strings more efficiently.

The Error Class and the Exception Class
The Java error-handling framework uses two different classes to identify abnormal software events:

The Error class is used to indicate a serious problem that the application should not try to handle.
The Exception class is used when there is a less catastrophic event that the application should try to handle.
The Throwable Class
Both Error and Exception classes inherit from the abstract class throwable. This means that both errors and exceptions will contain:

The type of problem – the class type, either Exception or Error
The problem message – whatever description you've provided within the class, such as "out of memory"
The stack trace where the exception occurred – the order in which things ran and the place in that sequence where the problem occurred (this information is used by developers to track down issues and resolve problems in the code)
Throwing an Exception
What does it mean to throw an exception?

When an error occurs within a method, that method creates an Exception object.
Next, the method hands the Exception off to the JVM runtime system.
And that's what we mean when we say that we are throwing an exception. We simply mean that a method hands off an exception to the runtime.
Checked vs Unchecked
In Java there are two different types of exceptions:

Unchecked Exceptions
Unchecked exceptions are exceptions that are unknown to the compiler.
Because these exceptions are only known at runtime, they are also referred to as runtime exceptions.
They are a result of a programming error, typically arithmetic errors (such as division by 0).
Unchecked exceptions are used when when we expect that the caller of the method cannot recover from the exception.
Checked Exceptions
Checked exceptions are known to the compiler.
If we are calling a method that potentially throws a checked exception, it must be handled (or we will get an error from the compiler).
Checked exceptions are used when we expect that the caller of the method can recover from the exception.

To handle exceptions, we need to write an exception handler. This involves three main components:

A try block
A catch block
A finally block
Here's an example:

try {
    read();
}
catch (FileNotFoundException ex){
    ex.getLocalizedMessage();
}
finally {
}
In this example, we first try to call the read method to read a file. If that doesn't work, the catch block throws a FileNotFoundException.

Let's take a close look at each component.

The try Block
The try block contains the code we want to try to run. In the example, we are trying to call the read method:

try {
    read();
}
The catch Block
A catch block is an exception handler that handles one specific type of Exception. In this example. The type of exception we are handling is a FileNotFoundException exception:

catch (FileNotFoundException ex){
    ex.getLocalizedMessage();
}
Remember, FileNotFoundException is a class and—as with all exceptions—it inherits from the Throwable class.

Inside the catch block, we add the code we want to execute when the exception is thrown—in this case, we are calling a method called getLocalizedMessage.

The finally Block
The last component of the handler is the finally block. This is an optional block and, in our example, you can see that it is empty:

finally {
}
The finally block is always executed–even if an unexpected error causes the method to terminate early.

What is an Enum?
In many cases when developing software we need to provide a predefined value for a single variable type. Enumerations (or Enums for short) are a special data type of constants that allow a variable to be set from an enumerated list.


An Enum is a Class
In Java, the declaration of an Enum defines a class. This class can exist within another class or as a standalone class.

In some cases, we might only need to use the Enum type within a single class (as would probably be the case with the stoplight example). In that case it would be acceptable to define it within another class rather than as a standalone. However, if other classes are expected to use the enum type, it should be defined as a separate, standalone class.


Syntax Example
Below is an example of how to create a stoplight enum like we showed in the video. Notice that we have created three constants, RED, YELLOW, and GREEN. In Java, it is standard to put the values of enums in uppercase to indicate that they are constants.

Creating an Enum
enum Stoplight {
  RED,
  YELLOW,
  GREEN
}
Assigning a Variable
Next, we will assign a variable, myStopLight, with the RED enum.

Stoplight myStoplight = Stoplight.RED;
Defining an Enum Inside a Class
We can also create an enum from inside a class:

public class Main {
  enum StopLight {
    RED,
    YELLOW,
    GREEN
  }

  public static void main(String[] args) {
    StopLight myStoplight = Stoplight.RED; 
    System.out.println(myStoplight);
  }
}


The Scanner class can read and parse simple text. Here are some key points to keep in mind:

It parses primitive types and String types into tokens.
By default it uses whitespaces to delimitate each word. However, it can also use regular expressions.
The Scanner class can read from several different types of sources, like strings, files and System.in (to get input from the command line).

Scanner Syntax
Example 1
We can use the Scanner class to get input from the command line. To do so, we instantiate a scanner object, passing in System.in:

Scanner scanner = new Scanner(System.in);
Example 2
In this example we are using the nextLine method to return the full line of the input:

Scanner scanner = new Scanner("This is a line");
System.out.println(scanner.nextLine());
Output:

This is a line
Example 3
In this next example, we are using the next method to read the first token. The next method finds and returns the next complete token.

Scanner scanner = new Scanner("This is a line");
System.out.println(scanner.next());
Output:

This
Example 4
In the final example, we are using the hasNext() method in a while loop to determine if it is safe to call the next method. We only want to call the next method when we know there is a token available.

Note: By default the Scanner tokenizes input by whitespaces. Let's say we have a string with the following text "One Two Three". The text will be tokenized into three separate tokens, "One", "Two" and "Three".

Scanner scanner = new Scanner("This is a line");

while(scanner.hasNext()) {
    System.out.println(scanner.next());
}
**Output: **

This
is
a
line